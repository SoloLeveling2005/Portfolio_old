# –ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò.
# –ë—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ settings.py.
# –ë—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π.
# TODO –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API.
# TODO –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
# TODO –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤.
# TODO –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ views.py
# TODO –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º asgi —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
# TODO
# TODO

from django.shortcuts import render
from rest_framework import generics, permissions, status
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework.settings import api_settings
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken

from api.models import User
from api.serializers import UserRegistrationSerializer, UserAuthenticationSerializer


# TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ —Ç–µ—Å—Ç—ã.
# TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ views:
# TODO * –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:
# TODO * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# TODO * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–∑—å—è. –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–∑–µ–π –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π.
# TODO * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π. –î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, —É–¥–∞–ª–∏—Ç—å –∏–∑ –Ω–µ–≥–æ.
# TODO * –°–û–û–ë–©–ï–°–¢–í–û:
# TODO * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤, –∞ —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –¥—Ä—É–∑–µ–π. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
# TODO * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
# TODO * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏. –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# –î–ï–ù–¨ –í–¢–û–†–û–ô.
# TODO *
# TODO *
# TODO
# TODO
# TODO
# TODO
# TODO
# TODO
# TODO
# TODO
# TODO
# TODO
# TODO




# TODO –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã API (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∫–∞—è —Ç–∞ –º–∞–≥–∏—è üòÖ)


jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER
jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER


class UserRegistrationView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserRegistrationSerializer
    permission_classes = (permissions.AllowAny,)


class UserAuthenticationView(generics.GenericAPIView):
    serializer_class = UserAuthenticationSerializer
    permission_classes = (permissions.AllowAny,)

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        refresh_token = RefreshToken.for_user(user)
        access_token = str(refresh_token.access_token)

        return Response({
            'user_id': user.id,
            'username': user.username,
            'access_token': access_token,
            'refresh_token': str(refresh_token)
        })


class UserSignoutView(APIView):
    permission_classes = (AllowAny,)

    def post(self, request):
        try:
            refresh_token = str(request.data.get('refresh_token'))
            if refresh_token:
                token = RefreshToken(refresh_token)
                token.blacklist()
                return Response({'detail': 'User successfully signed out.'}, status=status.HTTP_200_OK)
            else:
                return Response({'detail': 'Refresh token not provided.'}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            print(e)
            return Response({'detail': 'An error occurred while signing out.'},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UserTokenRestoreView(APIView):
    permission_classes = (AllowAny,)

    def post(self, request):
        token = request.data.get('token')
        user_id = request.data.get('user_id')

        if token and user_id:
            user = User.objects.get(id=user_id)
            refresh_token = RefreshToken.for_user(user)
            access_token = str(refresh_token.access_token)
            return Response({
                'user_id': user.id,
                'username': user.username,
                'access_token': access_token,
                'refresh_token': str(token)
            }, status=status.HTTP_200_OK)
        # except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        #     return Response({'detail': 'Invalid token or user_id.'}, status=status.HTTP_400_BAD_REQUEST)
        else:
            return Response({'detail': 'Token and user_id are required.'}, status=status.HTTP_400_BAD_REQUEST)
